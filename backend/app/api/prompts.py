"""
API endpoints for PromptOption operations
"""

from typing import List, Optional
from fastapi import APIRouter, HTTPException, Depends, Query
from app.models import PromptOption, CreatePromptRequest
from app.database import get_database

router = APIRouter(prefix="/prompts", tags=["prompts"])

@router.get("/", response_model=List[PromptOption])
async def get_prompts(
    skip: int = Query(0, ge=0),
    limit: int = Query(100, ge=1, le=1000),
    db = Depends(get_database)
):
    """Get list of available prompts"""
    
    # TODO: Implement pagination for prompts
    all_prompts = list(db.prompts.values())
    return all_prompts[skip:skip + limit]

@router.get("/{prompt_id}", response_model=PromptOption)
async def get_prompt(
    prompt_id: str,
    db = Depends(get_database)
):
    """Get a specific prompt by ID"""
    
    prompt = await db.get_prompt(prompt_id)
    if not prompt:
        raise HTTPException(status_code=404, detail="Prompt not found")
    
    return prompt

@router.post("/", response_model=PromptOption)
async def create_prompt(
    prompt_request: CreatePromptRequest,
    db = Depends(get_database)
):
    """Create a new prompt option"""
    
    new_prompt = PromptOption(
        id="",  # Will be generated by database
        text=prompt_request.text,
        target_symbol_id=prompt_request.target_symbol_id,
        prompt_type=prompt_request.prompt_type,
        rotation=prompt_request.rotation
    )
    
    created_prompt = await db.create_prompt(new_prompt)
    return created_prompt

@router.get("/page/{page_id}", response_model=List[PromptOption])
async def get_prompts_for_page(
    page_id: str,
    db = Depends(get_database)
):
    """Get context-aware prompts for a specific page"""
    
    # Verify page exists
    page = await db.get_page(page_id)
    if not page:
        raise HTTPException(status_code=404, detail="Page not found")
    
    # Get prompts for this page
    prompts = await db.get_prompts_for_page(page_id)
    
    # TODO: Implement context-aware prompt generation using:
    # - Current page content and metadata
    # - Vector similarity search
    # - Character-specific prompt templates
    # - User history and preferences
    
    # For now, return mock prompts based on page symbol
    mock_prompts = _generate_mock_prompts(page.symbol_id, page_id)
    
    return mock_prompts

def _generate_mock_prompts(symbol_id: str, page_id: str) -> List[PromptOption]:
    """Generate mock prompts for development (TODO: Replace with AI generation)"""
    
    base_prompts = {
        "london-fox": [
            {
                "text": "Challenge London's consciousness theories",
                "prompt_type": "user_prompt",
                "rotation": 180
            },
            {
                "text": "What does London do next?",
                "prompt_type": "character_prompt",
                "rotation": 90
            },
            {
                "text": "Ask about Synchromy-M.Y.S.S.T.E.R.Y",
                "prompt_type": "character_response",
                "rotation": 270
            }
        ],
        "glyph-marrow": [
            {
                "text": "Enter the queue with Glyph",
                "prompt_type": "user_prompt",
                "rotation": 180
            },
            {
                "text": "What word comes next?",
                "prompt_type": "character_prompt",
                "rotation": 90
            },
            {
                "text": "Ask about the waiting",
                "prompt_type": "character_response",
                "rotation": 270
            }
        ],
        "phillip-bafflemint": [
            {
                "text": "Investigate with Phillip",
                "prompt_type": "user_prompt",
                "rotation": 180
            },
            {
                "text": "What pattern emerges?",
                "prompt_type": "character_prompt",
                "rotation": 90
            },
            {
                "text": "Ask about the missing pieces",
                "prompt_type": "character_response",
                "rotation": 270
            }
        ]
    }
    
    # Get prompts for this symbol, or use default
    prompt_templates = base_prompts.get(symbol_id, base_prompts["london-fox"])
    
    # Convert to PromptOption objects
    prompts = []
    for i, template in enumerate(prompt_templates):
        prompt = PromptOption(
            id=f"prompt_{page_id}_{i}",
            text=template["text"],
            target_symbol_id=symbol_id,
            prompt_type=template["prompt_type"],
            rotation=template["rotation"]
        )
        prompts.append(prompt)
    
    return prompts

# TODO: Add these endpoints when AI generation is implemented
# @router.post("/generate")
# async def generate_prompts_for_context(
#     page_id: str,
#     user_id: Optional[str] = None,
#     count: int = 3
# ):
#     """Generate context-aware prompts using AI"""
#     pass

# @router.get("/search/semantic")
# async def search_prompts_semantic(query: str, limit: int = 10):
#     """Search prompts using vector similarity"""
#     pass