"""
API endpoints for StoryPage operations
"""

from typing import List, Optional
from fastapi import APIRouter, HTTPException, Depends, Query
from app.models import StoryPage, CreatePageRequest, PageListResponse
from app.database import get_database
from app.websocket import manager

router = APIRouter(prefix="/pages", tags=["pages"])

@router.get("/", response_model=PageListResponse)
async def get_pages(
    skip: int = Query(0, ge=0, description="Number of pages to skip"),
    limit: int = Query(100, ge=1, le=1000, description="Number of pages to return"),
    symbol_id: Optional[str] = Query(None, description="Filter by symbol ID"),
    db = Depends(get_database)
):
    """Get list of story pages with pagination and filtering"""
    
    if symbol_id:
        pages = await db.get_pages_by_symbol(symbol_id)
        total = len(pages)
        paginated_pages = pages[skip:skip + limit]
    else:
        pages = await db.get_pages(skip=skip, limit=limit)
        total = len(db.pages)
        paginated_pages = pages
    
    return PageListResponse(
        pages=paginated_pages,
        total=total,
        page=skip // limit + 1,
        size=len(paginated_pages)
    )

@router.get("/{page_id}", response_model=StoryPage)
async def get_page(
    page_id: str,
    db = Depends(get_database)
):
    """Get a specific story page by ID"""
    
    page = await db.get_page(page_id)
    if not page:
        raise HTTPException(status_code=404, detail="Page not found")
    
    return page

@router.post("/", response_model=StoryPage)
async def create_page(
    page_request: CreatePageRequest,
    db = Depends(get_database)
):
    """Create a new story page"""
    
    # Create the new page
    new_page = StoryPage(
        id="",  # Will be generated by database
        symbol_id=page_request.symbol_id,
        page_type=page_request.page_type,
        parent_id=page_request.parent_id,
        prompt_type=page_request.prompt_type,
        text=page_request.text,
        author="AI",  # TODO: Get from authenticated user
        rotation=page_request.rotation
    )
    
    # Save to database
    created_page = await db.create_page(new_page)
    
    # Broadcast update to connected clients
    await manager.send_page_update(
        page_id=created_page.id,
        page_data=created_page.dict()
    )
    
    return created_page

@router.get("/symbol/{symbol_id}", response_model=List[StoryPage])
async def get_pages_by_symbol(
    symbol_id: str,
    db = Depends(get_database)
):
    """Get all pages for a specific symbol/character"""
    
    pages = await db.get_pages_by_symbol(symbol_id)
    return pages

@router.put("/{page_id}", response_model=StoryPage)
async def update_page(
    page_id: str,
    updates: dict,
    db = Depends(get_database)
):
    """Update a story page"""
    
    updated_page = await db.update_page(page_id, updates)
    if not updated_page:
        raise HTTPException(status_code=404, detail="Page not found")
    
    # Broadcast update to connected clients
    await manager.send_page_update(
        page_id=updated_page.id,
        page_data=updated_page.dict()
    )
    
    return updated_page

@router.get("/{page_id}/children", response_model=List[StoryPage])
async def get_page_children(
    page_id: str,
    db = Depends(get_database)
):
    """Get all child pages of a specific page"""
    
    # Verify parent page exists
    parent_page = await db.get_page(page_id)
    if not parent_page:
        raise HTTPException(status_code=404, detail="Parent page not found")
    
    # Get all pages where this is the parent
    all_pages = await db.get_pages()
    children = [page for page in all_pages if page.parent_id == page_id]
    
    return children

# TODO: Add these endpoints when vector search is implemented
# @router.get("/search/semantic")
# async def search_pages_semantic(query: str, limit: int = 10):
#     """Search pages using vector similarity"""
#     pass

# @router.get("/search/motif")
# async def search_pages_by_motif(motif: str, limit: int = 10):
#     """Search pages by motif or symbol"""
#     pass