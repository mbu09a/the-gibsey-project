"""
API endpoints for User and Session operations
"""

from typing import List, Optional, Dict, Any
from fastapi import APIRouter, HTTPException, Depends, Query, Cookie
from app.models import User, CreateUserRequest, SessionData
from app.database import get_database
from datetime import datetime
import uuid

router = APIRouter(prefix="/users", tags=["users"])

@router.post("/", response_model=User)
async def create_user(
    user_request: CreateUserRequest,
    db = Depends(get_database)
):
    """Create a new user"""
    
    # Check if username already exists
    existing_user = await db.get_user_by_username(user_request.username)
    if existing_user:
        raise HTTPException(status_code=400, detail="Username already exists")
    
    new_user = User(
        id="",  # Will be generated by database
        username=user_request.username,
        email=user_request.email
    )
    
    created_user = await db.create_user(new_user)
    return created_user

@router.get("/{user_id}", response_model=User)
async def get_user(
    user_id: str,
    db = Depends(get_database)
):
    """Get a specific user by ID"""
    
    user = await db.get_user(user_id)
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    
    return user

@router.get("/username/{username}", response_model=User)
async def get_user_by_username(
    username: str,
    db = Depends(get_database)
):
    """Get a user by username"""
    
    user = await db.get_user_by_username(username)
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    
    return user

@router.put("/{user_id}", response_model=User)
async def update_user(
    user_id: str,
    updates: Dict[str, Any],
    db = Depends(get_database)
):
    """Update user information"""
    
    updated_user = await db.update_user(user_id, updates)
    if not updated_user:
        raise HTTPException(status_code=404, detail="User not found")
    
    return updated_user

# Session management endpoints
@router.post("/sessions", response_model=Dict[str, str])
async def create_session(
    user_id: str,
    db = Depends(get_database)
):
    """Create a new user session"""
    
    # Verify user exists
    user = await db.get_user(user_id)
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    
    session_id = await db.create_session(user_id)
    
    return {
        "session_id": session_id,
        "user_id": user_id
    }

@router.get("/sessions/{session_id}", response_model=SessionData)
async def get_session(
    session_id: str,
    db = Depends(get_database)
):
    """Get session information"""
    
    session = await db.get_session(session_id)
    if not session:
        raise HTTPException(status_code=404, detail="Session not found")
    
    return SessionData(**session)

@router.put("/sessions/{session_id}")
async def update_session(
    session_id: str,
    updates: Dict[str, Any],
    db = Depends(get_database)
):
    """Update session data"""
    
    success = await db.update_session(session_id, updates)
    if not success:
        raise HTTPException(status_code=404, detail="Session not found")
    
    return {"message": "Session updated successfully"}

@router.post("/sessions/{session_id}/progress")
async def update_session_progress(
    session_id: str,
    current_page_index: int,
    furthest_page_index: Optional[int] = None,
    db = Depends(get_database)
):
    """Update user's reading progress"""
    
    updates = {
        "current_page_index": current_page_index
    }
    
    if furthest_page_index is not None:
        updates["furthest_page_index"] = max(
            furthest_page_index, 
            current_page_index
        )
    
    success = await db.update_session(session_id, updates)
    if not success:
        raise HTTPException(status_code=404, detail="Session not found")
    
    return {"message": "Progress updated successfully"}

# Guest session support (no authentication required)
@router.post("/sessions/guest", response_model=Dict[str, str])
async def create_guest_session(
    db = Depends(get_database)
):
    """Create a guest session for anonymous users"""
    
    # Create a temporary guest user
    guest_user = User(
        id="",
        username=f"guest_{uuid.uuid4().hex[:8]}",
        permissions={"is_guest": True, "can_author": False}
    )
    
    created_user = await db.create_user(guest_user)
    session_id = await db.create_session(created_user.id)
    
    return {
        "session_id": session_id,
        "user_id": created_user.id,
        "is_guest": True
    }

# User history and authorship
@router.get("/{user_id}/history", response_model=List[str])
async def get_user_history(
    user_id: str,
    limit: int = Query(100, ge=1, le=1000),
    db = Depends(get_database)
):
    """Get user's reading history"""
    
    user = await db.get_user(user_id)
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    
    # Return recent history with limit
    return user.history[-limit:]

@router.get("/{user_id}/authored", response_model=List[str])
async def get_user_authored_pages(
    user_id: str,
    limit: int = Query(100, ge=1, le=1000),
    db = Depends(get_database)
):
    """Get pages authored by user"""
    
    user = await db.get_user(user_id)
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    
    # Return recent authored pages with limit
    return user.authored_pages[-limit:]

# TODO: Add these endpoints when authentication is implemented
# @router.post("/auth/login")
# async def login(credentials):
#     """Login with Supabase authentication"""
#     pass

# @router.post("/auth/logout")
# async def logout():
#     """Logout and invalidate session"""
#     pass

# @router.get("/auth/profile")
# async def get_current_user():
#     """Get current authenticated user"""
#     pass